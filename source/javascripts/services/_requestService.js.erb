(function() {

"use strict";

angular.module("BitriseWorkflowEditor").service("requestService", function($q, $injector, $location, $http, stringService, dateService) {

	var requestService = {
		mode: "<%= mode %>",
		appSlug: undefined,
		jobID: undefined
	};

	function errorFromResponse(response, defaultErrorMessage, errorMessagePrefix) {
		if (response && (response.status == -1 || response.status == 408)) {
			return new Error(response.config.method.toUpperCase() + " " + response.config.url + " - Request aborted");
		}

		var error = new Error(defaultErrorMessage);

		if (response && response.data) {
			if (response.data.error_msg) {
				error.message = response.data.error_msg;
			}
			else if (response.data.message) {
				error.message = response.data.message;
			}
			else if (response.data.errors) {
				var errors;

				if (angular.isArray(response.data.errors)) {
					if (angular.isString(response.data.errors[0])) {
						errors = _.map(response.data.errors, function(anErrorMessage) {
							return new Error(anErrorMessage);
						});
					}
					else {
						errors = _.map(response.data.errors, function(anErrorMap) {
							var error = new Error(anErrorMap.message);
							error.name = anErrorMap.type;

							return error;
						});
					}
				}
				else if (angular.isObject(response.data.errors)) {
					errors = _.map(_.flatten(_.values(response.data.errors)), function(anErrorMessage) {
						return new Error(anErrorMessage);
					});
				}

				error.name = _.pluck(errors, "name").join();
				error.message = stringService.errorMessageFromErrors(errors);
			}
		}

		if (errorMessagePrefix && (error.message != defaultErrorMessage)) {
			error.message = errorMessagePrefix += error.message;
		}

		return error;
	}

	// Connection

	requestService.cancelAPIConnectionClose = function(requestConfig) {
		return $http.post("<%= local_server_path(data[:routes][:local_server][:cancel_api_connection_close]) %>", undefined, requestConfig);
	};

	requestService.closeAPIConnection = function() {
		return $.ajax({
			type: "DELETE",
			url: "<%= local_server_path(data[:routes][:local_server][:close_api_connection]) %>",
			async: false, 
		});
	};

	// App config

	requestService.postAppConfig = function(appConfig, requestConfig) {
		var requestURL;
		var requestData;

		switch (requestService.mode) {
			case "website":
				requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:app_config_post]) %>", {
					app_slug: requestService.appSlug
				});
				requestData = {
					app_config_datastore_yaml: appConfig
				}

				break;
			case "cli":
				requestURL = "<%= local_server_path(data[:routes][:local_server][:app_config_post]) %>";
				requestData = {
					bitrise_yml: appConfig
				}

				break;
		}

		return $q(function(resolve, reject) {
			$http.post(requestURL, requestData, requestConfig).then(function(response) {
				resolve(response.data);
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:save_app_config][:default_error] %>", "<%= data[:strings][:request_service][:save_app_config][:error_prefix] %>"));
			});
		});
	};

	requestService.getAppConfig = function(requestConfig) {
		var requestURL;

		switch (requestService.mode) {
			case "website":
				requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:app_config_get]) %>", {
					app_slug: requestService.appSlug
				});

				break;
			case "cli":
				requestURL = "<%= local_server_path(data[:routes][:local_server][:app_config_get]) %>";

				break;
		}

		return $q(function(resolve, reject) {
			$http.get(requestURL, requestConfig).then(function(response) {
				resolve(response.data);
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:load_app_config][:default_error] %>", "<%= data[:strings][:request_service][:load_app_config][:error_prefix] %>"));
			});
		});
	};

	// App config YML

	requestService.postAppConfigYML = function(appConfigYML, requestConfig) {
		var requestURL;
		var requestData;

		switch (requestService.mode) {
			case "website":
				requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:yml_post]) %>", {
					app_slug: requestService.appSlug
				});
				requestData = {
					app_config_datastore_yaml: appConfigYML
				};

				break;
			case "cli":
				requestURL = "<%= local_server_path(data[:routes][:local_server][:yml_post]) %>";
				requestData = {
					bitrise_yml: appConfigYML
				};

				break;
		}

		return $q(function(resolve, reject) {
			$http.post(requestURL, requestData, requestConfig).then(function(response) {
				resolve(response.data);
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:save_app_config][:default_error] %>", "<%= data[:strings][:request_service][:save_app_config][:error_prefix] %>"));
			});
		});
	};

	requestService.getAppConfigYML = function(requestConfig) {
		var requestURL;

		switch (requestService.mode) {
			case "website":
				requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:yml_get]) %>", {
					app_slug: requestService.appSlug
				});

				break;
			case "cli":
				requestURL = "<%= local_server_path(data[:routes][:local_server][:yml_get]) %>";

				break;
		}

		return $q(function(resolve, reject) {
			$http.get(requestURL, requestConfig).then(function(response) {
				resolve(response.data);
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:load_app_config][:default_error] %>", "<%= data[:strings][:request_service][:load_app_config][:error_prefix] %>"));
			});
		});
	};

	requestService.appConfigYMLDownloadPath = function() {
		return stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:yml_download]) %>", {
			app_slug: requestService.appSlug
		});
	};

	// Secrets

	requestService.postSecrets = function(secrets, requestConfig) {
		var requestURL;
		var requestData;

		switch (requestService.mode) {
			case "website":
				requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:secrets_post]) %>", {
					app_slug: requestService.appSlug
				});
				requestData = {
					app_secrets: {
						envs: _.map(secrets, function(aSecret) {
							return aSecret.userVariableConfig
						})
					}
				};

				break;
			case "cli":
				requestURL = "<%= local_server_path(data[:routes][:local_server][:secrets_post]) %>";
				requestData = {
					envs: _.map(secrets, function(aSecret) {
						return aSecret.userVariableConfig
					})
				};

				break;
		}

		return $q(function(resolve, reject) {
			$http.post(requestURL, requestData, requestConfig).then(function(response) {
				resolve(response.data);
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:save_secrets][:default_error] %>", "<%= data[:strings][:request_service][:save_secrets][:error_prefix] %>"));
			});
		});
	};

	requestService.getSecrets = function(requestConfig) {
		var requestURL;

		switch (requestService.mode) {
			case "website":
				requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:secrets_get]) %>", {
					app_slug: requestService.appSlug
				});

				break;
			case "cli":
				requestURL = "<%= local_server_path(data[:routes][:local_server][:secrets_get]) %>";

				break;
		}

		return $q(function(resolve, reject) {
			$http.get(requestURL, requestConfig).then(function(response) {
				resolve(response.data.envs);
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:load_secrets][:default_error] %>", "<%= data[:strings][:request_service][:load_secrets][:error_prefix] %>"));
			});
		});
	};

	// Steps

	requestService.libraryFetch = function(libraryURLs, requestConfig) {
		var requestMethod;
		var requestURL;
		var requestData;

		if (libraryURLs) {
			requestData = {
				libraries: libraryURLs
			};
		}

		switch (requestService.mode) {
			case "website":
				requestMethod = "get";
				requestURL = "<%= webserver_path(data[:routes][:website][:bitrise_steplib_get]) %>";

				break;
			case "cli":
				requestMethod = "post";
				requestURL = "<%= local_server_path(data[:routes][:local_server][:libraries_fetch]) %>";

				break;
		}

		return $q(function(resolve, reject) {
			$http[requestMethod](requestURL, requestData, requestConfig).then(function(response) {
				switch (requestService.mode) {
					case "website":
						var libraryMap = {};
						libraryMap[response.data.steplib_source] = response.data;

						resolve(libraryMap);

						break;
					case "cli":
						resolve(response.data.library_map);

						break;
				}
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:libraries_fetch][:default_error] %>", "<%= data[:strings][:request_service][:libraries_fetch][:error_prefix] %>"));
			});
		});
	};

	requestService.stepConfigFetch = function(step, requestConfig) {
		var requestURL = "<%= local_server_path(data[:routes][:local_server][:step_config_fetch]) %>";
		var requestData = {};

		if (step.localPath) {
			requestData.library = "path";
			requestData.id = step.localPath;
		}
		else if (step.gitURL) {
			switch (requestService.mode) {
				case "website":
					var stepYMLurl;

					var githubGitURLRegexp = new RegExp("^(?:(?:http|https)\:\/\/){0,1}(?:www\.){0,1}(?:(?:github)\.com\/)(.*?)(?:\.git){0,1}$");
					if (githubGitURLRegexp.test(step.gitURL)) {
						var stepYMLurl = stringService.stringReplacedWithParameters("<%= data[:routes][:other][:github_step_yml_path] %>", {
							step_path: githubGitURLRegexp.exec(step.gitURL)[1],
							step_version: step.version ? step.version : "master"
						});
					}

					if (stepYMLurl) {
						return $q(function(resolve, reject) {
							$http.get(stepYMLurl, requestConfig).then(function(response) {
								try {
									var defaultStepConfig = jsyaml.load(response.data);
									resolve(defaultStepConfig);
								}
								catch (error) {
									reject(new Error("<%= data[:strings][:request_service][:step_config_fetch][:default_error] %>"));
								}
							}, function(response) {
								reject(new Error("<%= data[:strings][:request_service][:step_config_fetch][:error_prefix] %><%= data[:strings][:request_service][:step_config_fetch][:github_error] %>"));
							});
						});
					}
					else {
						return $q.reject(new Error("<%= data[:strings][:request_service][:step_config_fetch][:error_prefix] %><%= data[:strings][:request_service][:step_config_fetch][:not_supported_host] %>"));
					}
				case "cli":
					requestData.library = "git";
					requestData.id = step.gitURL;
					requestData.version = step.version;

					break;
			}
		}
		else {
			requestData.library = step.libraryURL;
			requestData.id = step.id;
			requestData.version = step.version;
		}

		return $q(function(resolve, reject) {
			$http.post(requestURL, requestData, requestConfig).then(function(response) {
				resolve(response.data.step);
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:step_config_fetch][:default_error] %>", "<%= data[:strings][:request_service][:step_config_fetch][:error_prefix] %>"));
			});
		});
	};

	// Variables

	requestService.getDefaultOutputs = function(requestConfig) {
		var requestURL;

		switch (requestService.mode) {
			case "website":
				requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:default_outputs_get]) %>", {
					app_slug: requestService.appSlug
				});

				break;
			case "cli":
				requestURL = "<%= local_server_path(data[:routes][:local_server][:default_outputs_get]) %>";

				break;
		}

		return $q(function(resolve, reject) {
			$http.get(requestURL, requestConfig).then(function(response) {
				resolve(response.data);
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:load_default_outputs][:default_error] %>", "<%= data[:strings][:request_service][:load_default_outputs][:error_prefix] %>"));
			});
		});
	};

	// Project types

	requestService.getAppProjectType = function(requestConfig) {
		var requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:app_project_type_get]) %>", {
			app_slug: requestService.appSlug
		});

		return $q(function(resolve, reject) {
			$http.get(requestURL, requestConfig).then(function(response) {
				resolve(response.data.project_type);
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:get_app_project_type][:default_error] %>", "<%= data[:strings][:request_service][:get_app_project_type][:error_prefix] %>"));
			});
		});
	};

	requestService.getAppAvailableProjectTypes = function(requestConfig) {
		var requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:app_stack_info_get]) %>", {
			app_slug: requestService.appSlug
		});

		return $q(function(resolve, reject) {
			$http.get(requestURL, requestConfig).then(function(response) {
				resolve(response.data ? response.data.project_types : []);
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:get_app_available_project_types][:default_error] %>", "<%= data[:strings][:request_service][:get_app_available_project_types][:error_prefix] %>"));
			});
		});
	};

	// Provisioning profiles

	requestService.getDetailsOfProvProfile = function(databaseID, requestConfig) {
		var requestURL;
		
		switch (requestService.mode) {
			case "website":
				requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:prov_profile_get_details]) %>", {
					prov_profile_id: databaseID
				});

				break;
			case "cli":
				return $q.reject(new Error("<%= data[:strings][:request_service][:get_details_of_prov_profile][:not_website_mode_error] %>"));

				break;
		}

		return $q(function(resolve, reject) {
			$http.get(requestURL, requestConfig).then(function(response) {
				resolve({
					uuid: response.data.prov_profile_details.uuid,
					expiresAt: dateService.dateFromString(response.data.prov_profile_details.expiration_date),
					exportType: response.data.prov_profile_details.export_type,
					teamName: response.data.prov_profile_details.team_name,
					teamID: response.data.prov_profile_details.team_id,
					bundleID: response.data.prov_profile_details.bundle_id,
					developerCertificateIdentities: _.map(response.data.prov_profile_details.developer_certificates, function(aCertificateIdentity) {
						return {
							commonName: aCertificateIdentity.common_name,
							startDate: dateService.dateFromString(aCertificateIdentity.start_date),
							endDate: dateService.dateFromString(aCertificateIdentity.end_date),
							teamName: aCertificateIdentity.team_name,
							teamID: aCertificateIdentity.team_id,
							serial: aCertificateIdentity.serial
						};
					}),
					capabilityKeys: _.keys(response.data.prov_profile_details.entitlements),
					provisionedDevices: _.map(response.data.prov_profile_details.provisioned_devices, function(udid) {
						return {
							udid: udid
						};
					})
				});
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:get_details_of_prov_profile][:default_error] %>", "<%= data[:strings][:request_service][:get_details_of_prov_profile][:error_prefix] %>"));
			});
		});
	};

	requestService.fetchAllTestDevicesOfRepository = function(requestConfig) {
		var requestURL;
		
		switch (requestService.mode) {
			case "website":
				requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:team_test_devices]) %>", {
					app_slug: requestService.appSlug
				});

				break;
			case "cli":
				return $q.reject(new Error("<%= data[:strings][:request_service][:get_all_test_devices_of_repository][:not_website_mode_error] %>"));

				break;
		}

		return $q(function(resolve, reject) {
			$http.get(requestURL, requestConfig).then(function(response) {
				resolve({
					devices: _.map(response.data, function(aDeviceData) {
						return {
							deviceIdentifier: aDeviceData.device_identifier,
							id: aDeviceData.id,
							owner: aDeviceData.owner,
							title: aDeviceData.title
						};
					})
				})
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:get_all_test_devices_of_repository][:default_error] %>", "<%= data[:strings][:request_service][:get_all_test_devices_of_repository][:error_prefix] %>"));
			});
		});
	};

	requestService.postProvProfileCreate = function(fileName, fileSize, requestConfig) {
		var requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:prov_profile_create]) %>", {
			job_id: requestService.jobID
		});

		var requestData = {
			upload_file_name: fileName,
			upload_file_size: fileSize
		};

		return $q(function(resolve, reject) {
			$http.post(requestURL, requestData, requestConfig).then(function(response) {
				resolve({
					databaseID: response.data.id,
					uploadURL: response.data.upload_url
				});
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:create_prov_profile][:default_error] %>", "<%= data[:strings][:request_service][:create_prov_profile][:error_prefix] %>"));
			});
		});
	};

	requestService.finalizeProvProfileUpload = function(databaseID, isSuccess, requestConfig) {
		var requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:prov_profile_finalize_upload]) %>", {
			prov_profile_id: databaseID
		});

		var requestData = {
			success: isSuccess
		};

		return $q(function(resolve, reject) {
			return $http.post(requestURL, requestData, requestConfig).then(function() {
				resolve();
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:finalize_prov_profile_upload][:default_error] %>", "<%= data[:strings][:request_service][:finalize_prov_profile_upload][:error_prefix] %>"));
			});
		});
	};

	requestService.getProvProfiles = function(requestConfig) {
		var requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:prov_profiles_get]) %>", {
			job_id: requestService.jobID
		});

		return $q(function(resolve, reject) {
			$http.get(requestURL, requestConfig).then(function(response) {
				resolve(_.map(response.data.prov_profile_documents, function(aProvProfileData) {
					return {
						databaseID: aProvProfileData.id,
						isProcessed: aProvProfileData.processed,
						uploadFileName: aProvProfileData.upload_file_name,
						isExpose: aProvProfileData.is_expose
					};
				}));
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:load_prov_profiles][:default_error] %>", "<%= data[:strings][:request_service][:load_prov_profiles][:error_prefix] %>"));
			});
		});
	};

	requestService.updateProvProfileIsExposeState = function(databaseID, isExpose, requestConfig) {
		var requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:prov_profile_is_expose_state_update]) %>", {
			prov_profile_id: databaseID,
		});

		var requestData = {
			is_expose: isExpose
		}

		return $q(function(resolve, reject) {
			$http.post(requestURL, requestData, requestConfig).then(function() {
				resolve();
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:update_prov_profile_is_expose_state][:default_error] %>", "<%= data[:strings][:request_service][:update_prov_profile_is_expose_state][:error_prefix] %>"));
			});
		});
	};

	requestService.downloadProvProfile = function(databaseID) {
		return stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:prov_profile_download]) %>", {
			prov_profile_id: databaseID
		});
	};

	requestService.deleteProvProfile = function(databaseID, requestConfig) {
		var requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:prov_profile_delete]) %>", {
			prov_profile_id: databaseID
		});

		return $q(function(resolve, reject) {
			$http.delete(requestURL, requestConfig).then(function(response) {
				resolve();
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:delete_prov_profile][:default_error] %>", "<%= data[:strings][:request_service][:delete_prov_profile][:error_prefix] %>"));
			});
		});
	};

	// Certificates

	requestService.getDetailsOfCertificate = function(certificateDatabaseID, certificatePassword, requestConfig) {
		var requestURL;
		
		switch (requestService.mode) {
			case "website":
				requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:certificate_get_details]) %>", {
					certificate_id: certificateDatabaseID,
					password: certificatePassword
				});

				break;
			case "cli":
				return $q.reject(new Error("<%= data[:strings][:request_service][:get_details_of_certificate][:not_website_mode_error] %>"));

				break;
		}

		return $q(function(resolve, reject) {
			$http.get(requestURL, requestConfig).then(function(response) {
				resolve(_.map(response.data.build_certificate_details, function(aCertificateData) {
					return {
						commonName: aCertificateData.common_name,
						startDate: dateService.dateFromString(aCertificateData.start_date),
						endDate: dateService.dateFromString(aCertificateData.end_date),
						teamName: aCertificateData.team_name,
						teamID: aCertificateData.team_id,
						serial: aCertificateData.serial
					};
				}));
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:get_details_of_certificate][:default_error] %>", "<%= data[:strings][:request_service][:get_details_of_certificate][:error_prefix] %>"));
			});
		});
	};

	requestService.postCertificateCreate = function(fileName, fileSize, requestConfig) {
		var requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:certificate_create]) %>", {
			job_id: requestService.jobID
		});

		var requestData = {
			upload_file_name: fileName,
			upload_file_size: fileSize
		};

		return $q(function(resolve, reject) {
			$http.post(requestURL, requestData, requestConfig).then(function(response) {
				resolve({
					databaseID: response.data.id,
					uploadURL: response.data.upload_url
				});
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:create_certificate][:default_error] %>", "<%= data[:strings][:request_service][:create_certificate][:error_prefix] %>"));
			});
		});
	};

	requestService.finalizeCertificateUpload = function(databaseID, isSuccess, requestConfig) {
		var requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:certificate_finalize_upload]) %>", {
			certificate_id: databaseID
		});

		var requestData = {
			success: isSuccess
		};

		return $q(function(resolve, reject) {
			return $http.post(requestURL, requestData, requestConfig).then(function() {
				resolve();
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:finalize_certificate_upload][:default_error] %>", "<%= data[:strings][:request_service][:finalize_certificate_upload][:error_prefix] %>"));
			});
		});
	};

	requestService.getCertificates = function(requestConfig) {
		var requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:certificates_get]) %>", {
			job_id: requestService.jobID
		});

		return $q(function(resolve, reject) {
			$http.get(requestURL, requestConfig).then(function(response) {
				resolve(_.map(response.data.build_certificates, function(aCertificateData) {
					return {
						databaseID: aCertificateData.id,
						isProcessed: aCertificateData.processed,
						uploadFileName: aCertificateData.upload_file_name,
						password: aCertificateData.certificate_password,
						isExpose: aCertificateData.is_expose
					};
				}));
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:load_certificates][:default_error] %>", "<%= data[:strings][:request_service][:load_certificates][:error_prefix] %>"));
			});
		});
	};

	requestService.updateCertificateIsExposeState = function(databaseID, isExpose, requestConfig) {
		var requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:certificate_is_expose_state_update]) %>", {
			certificate_id: databaseID,
		});

		var requestData = {
			is_expose: isExpose
		}

		return $q(function(resolve, reject) {
			$http.post(requestURL, requestData, requestConfig).then(function() {
				resolve();
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:update_certificate_is_expose_state][:default_error] %>", "<%= data[:strings][:request_service][:update_certificate_is_expose_state][:error_prefix] %>"));
			});
		});
	};

	requestService.downloadCertificate = function(databaseID) {
		return stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:certificate_download]) %>", {
			certificate_id: databaseID
		});
	};

	requestService.putCertificatePasswordSave = function(databaseID, password, requestConfig) {
		var requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:certificate_password_save]) %>", {
			certificate_id: databaseID
		});

		var requestData = {
			certificate_password: password
		};

		return $q(function(resolve, reject) {
			return $http.put(requestURL, requestData, requestConfig).then(function() {
				resolve();
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:save_certificate_password][:default_error] %>", "<%= data[:strings][:request_service][:save_certificate_password][:error_prefix] %>"));
			});
		});
	};

	requestService.deleteCertificate = function(databaseID, requestConfig) {
		var requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:certificate_delete]) %>", {
			certificate_id: databaseID
		});

		return $q(function(resolve, reject) {
			$http.delete(requestURL, requestConfig).then(function(response) {
				resolve();
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:delete_certificate][:default_error] %>", "<%= data[:strings][:request_service][:delete_certificate][:error_prefix] %>"));
			});
		});
	};

	// Generic files

	requestService.postGenericFileCreate = function(envVarPartialID, fileName, fileSize, requestConfig) {
		var requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:generic_file_create]) %>", {
			job_id: requestService.jobID
		});

		var requestData = {
			user_env_key: envVarPartialID,
			upload_file_name: fileName,
			upload_file_size: fileSize
		};

		return $q(function(resolve, reject) {
			$http.post(requestURL, requestData, requestConfig).then(function(response) {
				resolve({
					databaseID: response.data.id,
					uploadURL: response.data.upload_url
				});
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:create_generic_file][:default_error] %>", "<%= data[:strings][:request_service][:create_generic_file][:error_prefix] %>"));
			});
		});
	};

	requestService.finalizeGenericFileUpload = function(databaseID, isSuccess, requestConfig) {
		var requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:generic_file_finalize_upload]) %>", {
			generic_file_id: databaseID
		});

		var requestData = {
			success: isSuccess
		};

		return $q(function(resolve, reject) {
			return $http.post(requestURL, requestData, requestConfig).then(function() {
				resolve();
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:finalize_generic_file_upload][:default_error] %>", "<%= data[:strings][:request_service][:finalize_generic_file_upload][:error_prefix] %>"));
			});
		});
	};

	requestService.getGenericFiles = function(requestConfig) {
		var requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:generic_files_get]) %>", {
			job_id: requestService.jobID
		});

		return $q(function(resolve, reject) {
			$http.get(requestURL, requestConfig).then(function(response) {
				var KeystoreFile = $injector.get("KeystoreFile");

				resolve(_.map(_.filter(response.data.project_file_storage_documents, function(aGenericFileData) {
					return aGenericFileData.user_env_key != KeystoreFile.downloadURLEnvVarPartialID;
				}), function(aGenericFileData) {
					return {
						databaseID: aGenericFileData.id,
						isProcessed: aGenericFileData.processed,
						envVarPartialID: aGenericFileData.user_env_key,
						uploadFileName: aGenericFileData.upload_file_name,
						isExpose: aGenericFileData.is_expose
					};
				}));
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:load_generic_files][:default_error] %>", "<%= data[:strings][:request_service][:load_generic_files][:error_prefix] %>"));
			});
		});
	};
	
	requestService.updateGenericFileIsExposeState = function(databaseID, isExpose, requestConfig) {
		var requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:generic_file_is_expose_state_update]) %>", {
			generic_file_id: databaseID,
		});

		var requestData = {
			is_expose: isExpose
		}

		return $q(function(resolve, reject) {
			$http.post(requestURL, requestData, requestConfig).then(function() {
				resolve();
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:update_generic_file_is_expose_state][:default_error] %>", "<%= data[:strings][:request_service][:update_generic_file_is_expose_state][:error_prefix] %>"));
			});
		});
	};

	requestService.downloadGenericFile = function(databaseID) {
		return stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:generic_file_download]) %>", {
			generic_file_id: databaseID
		});
	};

	requestService.deleteGenericFile = function(databaseID, requestConfig) {
		var requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:generic_file_delete]) %>", {
			generic_file_id: databaseID
		});

		return $q(function(resolve, reject) {
			$http.delete(requestURL, requestConfig).then(function(response) {
				resolve();
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:delete_generic_file][:default_error] %>", "<%= data[:strings][:request_service][:delete_generic_file][:error_prefix] %>"));
			});
		});
	};

	// Android Keystore file

	requestService.postKeystoreFileCreate = function(fileName, fileSize, requestConfig) {
		var requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:generic_file_create]) %>", {
			job_id: requestService.jobID
		});

		var KeystoreFile = $injector.get("KeystoreFile");

		var requestData = {
			user_env_key: KeystoreFile.downloadURLEnvVarPartialID,
			upload_file_name: fileName,
			upload_file_size: fileSize
		};

		return $q(function(resolve, reject) {
			$http.post(requestURL, requestData, requestConfig).then(function(response) {
				resolve({
					databaseID: response.data.id,
					uploadURL: response.data.upload_url
				});
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:create_keystore_file][:default_error] %>", "<%= data[:strings][:request_service][:create_keystore_file][:error_prefix] %>"));
			});
		});
	};

	requestService.finalizeKeystoreFileUpload = function(databaseID, isSuccess, requestConfig) {
		var requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:generic_file_finalize_upload]) %>", {
			generic_file_id: databaseID
		});

		var requestData = {
			success: isSuccess
		};

		return $q(function(resolve, reject) {
			return $http.post(requestURL, requestData, requestConfig).then(function() {
				resolve();
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:finalize_keystore_file_upload][:default_error] %>", "<%= data[:strings][:request_service][:finalize_keystore_file_upload][:error_prefix] %>"));
			});
		});
	};

	requestService.getKeystoreFile = function(requestConfig) {
		var requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:generic_files_get]) %>", {
			job_id: requestService.jobID
		});

		return $q(function(resolve, reject) {
			$http.get(requestURL, requestConfig).then(function(response) {
				var KeystoreFile = $injector.get("KeystoreFile");
				var keystoreFileData = _.find(response.data.project_file_storage_documents, {
					user_env_key: KeystoreFile.downloadURLEnvVarPartialID
				});

				var responseData = {
					genericFileAndKeystoreFileCountSum: response.data.project_file_storage_documents.length
				};
				
				if (keystoreFileData) {
					responseData.keystoreFileData = {
						databaseID: keystoreFileData.id,
						isProcessed: keystoreFileData.processed,
						envVarPartialID: keystoreFileData.user_env_key,
						uploadFileName: keystoreFileData.upload_file_name,
						isExpose: keystoreFileData.is_expose
					};

					if (keystoreFileData.exposed_meta_datastore) {
						responseData.keystoreFileData.password = keystoreFileData.exposed_meta_datastore.PASSWORD;
						responseData.keystoreFileData.alias = keystoreFileData.exposed_meta_datastore.ALIAS;
						responseData.keystoreFileData.privateKeyPassword = keystoreFileData.exposed_meta_datastore.PRIVATE_KEY_PASSWORD;
					}
				}
				
				resolve(responseData);
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:load_keystore_file][:default_error] %>", "<%= data[:strings][:request_service][:load_keystore_file][:error_prefix] %>"));
			});
		});
	};

	requestService.updateKeystoreFileIsExposeState = function(databaseID, isExpose, requestConfig) {
		var requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:generic_file_is_expose_state_update]) %>", {
			generic_file_id: databaseID,
		});

		var requestData = {
			is_expose: isExpose
		}

		return $q(function(resolve, reject) {
			$http.post(requestURL, requestData, requestConfig).then(function() {
				resolve();
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:update_generic_file_is_expose_state][:default_error] %>", "<%= data[:strings][:request_service][:update_generic_file_is_expose_state][:error_prefix] %>"));
			});
		});
	};

	requestService.downloadKeystoreFile = function(databaseID) {
		return stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:generic_file_download]) %>", {
			generic_file_id: databaseID
		});
	};

	requestService.putKeystoreFileMetadataSave = function(databaseID, password, alias, privateKeyPassword, requestConfig) {
		var requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:keystore_file_metadata_save]) %>", {
			keystore_file_id: databaseID
		});

		var requestData = {
			exposed_meta: {
				PASSWORD: password,
				ALIAS: alias,
				PRIVATE_KEY_PASSWORD: privateKeyPassword
			}
		};

		return $q(function(resolve, reject) {
			return $http.put(requestURL, requestData, requestConfig).then(function() {
				resolve();
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:save_keystore_file_metadata][:default_error] %>", "<%= data[:strings][:request_service][:save_keystore_file_metadata][:error_prefix] %>"));
			});
		});
	};

	requestService.deleteKeystoreFile = function(databaseID, requestConfig) {
		var requestURL = stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:generic_file_delete]) %>", {
			generic_file_id: databaseID
		});

		return $q(function(resolve, reject) {
			$http.delete(requestURL, requestConfig).then(function(response) {
				resolve();
			}, function(response) {
				reject(errorFromResponse(response, "<%= data[:strings][:request_service][:delete_keystore_file][:default_error] %>", "<%= data[:strings][:request_service][:delete_keystore_file][:error_prefix] %>"));
			});
		});
	};

	// Amazon S3

	requestService.uploadFileToStorage = function(uploadURL, file) {
		return $q(function(resolve, reject) {
			$.ajax({
				type: "PUT",
				url: uploadURL,
				contentType: "binary/octet-stream",
				processData: false,
				data: file
			}).then(function() {
				resolve();
			}, function(response) {
				reject(new Error("<%= data[:strings][:request_service][:upload_file_to_storage][:default_error] %>"));
			});
		});
	};

	return requestService;

});

})();
