(function() {

"use strict";

angular.module("BitriseWorkflowEditor").controller("ProvProfileController", function($scope, $q, $timeout, requestService, stringService, dateService, certificateService, Popup, Progress, ProvProfile) {

	var viewModel = this;

	$scope.dateService = dateService;
	$scope.certificateService = certificateService;

	var validateCertificatesReloadIntervalInSeconds = 2;	
	var provProfilesReloadIntervalInSeconds = 2;
	viewModel.maximumProvProfilesCount = 30;

	viewModel.loadProvProfilesProgress = new Progress();
	viewModel.uploadProvProfilesProgress = new Progress();
	viewModel.deleteProvProfileProgress = new Progress();
	viewModel.validateTestDevicesProgress = new Progress();
	viewModel.validateCertificatesProgress = new Progress();

	viewModel.provProfiles;
	viewModel.provProfilesToUpload;
	viewModel.provProfileUploader;
	viewModel.provProfileConfigs = {};

	viewModel.validatedProvProfileDetailsPopup = new Popup();
	viewModel.validatedProvProfileDetailsPopup.afterDismissCallback = function() {
		viewModel.selectedProvProfile = null;
	};
	
	viewModel.menus = [{
		id: "matching-certificates",
		title: "<%= data[:strings][:code_signing][:prov_profile][:prov_profile_details_popup][:menus][:matching_certificates] %>",
		cssClass: "matching-certificates",
		validationStatus: function() {
			if (!viewModel.selectedProvProfile) {
				return undefined;
			}

			return viewModel.provProfileConfigs[viewModel.selectedProvProfile.databaseID].validationStatuses.certificateValidationsStatus;
		}
	}, {
		id: "devices",
		title: "<%= data[:strings][:code_signing][:prov_profile][:prov_profile_details_popup][:menus][:devices] %>",
		cssClass: "devices",
		validationStatus: function() {
			if (!viewModel.selectedProvProfile) {
				return undefined;
			}

			return viewModel.provProfileConfigs[viewModel.selectedProvProfile.databaseID].validationStatuses.deviceValidationStatus;
		}
	}, {
		id: "capabilities",
		title: "<%= data[:strings][:code_signing][:prov_profile][:prov_profile_details_popup][:menus][:capabilities] %>",
		cssClass: "capabilities",
		validationStatus: undefined
	}];
	viewModel.selectedMenu;

	function loadProvProfiles(shouldClearPreviousLoad) {
		viewModel.loadProvProfilesProgress.start("<%= data[:strings][:code_signing][:prov_profile][:load_progress][:in_progress] %>");
		if (viewModel.uploadProvProfilesProgress.isIdle && viewModel.uploadProvProfilesProgress.statusMessage !== null) {
			viewModel.uploadProvProfilesProgress.reset();
		}

		if (shouldClearPreviousLoad === undefined) {
			shouldClearPreviousLoad = false;
		}

		if (shouldClearPreviousLoad) {
			viewModel.provProfiles = undefined;
		}

		requestService.getProvProfiles().then(function(provProfileDatas) {
			viewModel.provProfiles = _.map(provProfileDatas, function(aProvProfileData) {
				var provProfile = new ProvProfile();

				provProfile.databaseID = aProvProfileData.databaseID;
				provProfile.isProcessed = aProvProfileData.isProcessed;
				provProfile.uploadFileName = aProvProfileData.uploadFileName;
				provProfile.isExpose = aProvProfileData.isExpose;

				var provProfileIsExposeGetterSetterProgress = new Progress();

				viewModel.provProfileConfigs[provProfile.databaseID] = {
					getDetailsProgress: new Progress(),
					validationProgress: new Progress(),
					isMenuVisible: false,
					isExposeGetterSetter: isExposeGetterSetterForProvProfile(provProfile, provProfileIsExposeGetterSetterProgress),
					isExposeGetterSetterProgress: provProfileIsExposeGetterSetterProgress,
					validationStatuses: {
						globalValidationStatus: "in-progress",
						deviceValidationStatus: "in-progress",
						certificateValidationsStatus: "in-progress"
					}
				};

				if (!provProfile.uuid) {
					viewModel.getDetails(provProfile).then(function() {
						validateDetails(provProfile);
					}, function() {

					});
				}

				return provProfile;
			});

			viewModel.loadProvProfilesProgress.success();

			if (_.find(viewModel.provProfiles, {
				isProcessed: false
			})) {
				$timeout(function() {
					loadProvProfiles();
				}, provProfilesReloadIntervalInSeconds * 1000);
			}
		}, function(error) {
			viewModel.loadProvProfilesProgress.error(error);
		});
	};

	viewModel.filesSelectedForUpload = function(files) {
		if (files.length == 0) {
			return;
		}

		viewModel.provProfilesToUpload = _.map(files, function(aFile) {
			var provProfile = new ProvProfile();
			provProfile.file = aFile;

			return provProfile;
		});
	};

	viewModel.uploadProvProfiles = function() {
		viewModel.uploadProvProfilesProgress.start("<%= data[:strings][:code_signing][:prov_profile][:upload_progress][:in_progress] %>");

		if (viewModel.provProfiles.length + viewModel.provProfilesToUpload.length > viewModel.maximumProvProfilesCount) {
			viewModel.uploadProvProfilesProgress.error(new Error(stringService.stringReplacedWithParameters("<%= data[:strings][:code_signing][:prov_profile][:can_only_upload_x_more] %>", {
				count: viewModel.maximumProvProfilesCount - viewModel.provProfiles.length
			})));

			viewModel.provProfilesToUpload = undefined;

			return;
		}

		var uploadPromise = $q.when();
		_.each(viewModel.provProfilesToUpload, function(aProvProfile) {
			uploadPromise = uploadPromise.then(function() {
				return aProvProfile.upload();
			});
		});

		$q(function(resolve, reject) {
			uploadPromise.then(function() {
				resolve();
			}, function(error) {
				reject(error);
			});
		}).then(function() {
			viewModel.uploadProvProfilesProgress.success();

			viewModel.provProfilesToUpload = undefined;
			loadProvProfiles(true);
		}, function(error) {
			viewModel.uploadProvProfilesProgress.error(error);
		});
	};

	viewModel.deleteProvProfile = function(provProfile) {
		Popup.showConfirmPopup("<%= data[:strings][:code_signing][:prov_profile][:delete_confirm][:question_short] %>", stringService.stringReplacedWithParameters("<%= data[:strings][:code_signing][:prov_profile][:delete_confirm][:question] %>", {
			provisioning_profile_name: provProfile.displayName()
		}), "<%= data[:strings][:code_signing][:prov_profile][:delete_confirm][:yes_title] %>", "<%= data[:strings][:code_signing][:prov_profile][:delete_confirm][:no_title] %>", function() {
			viewModel.deleteProvProfileProgress.start("<%= data[:strings][:code_signing][:prov_profile][:delete_progress][:in_progress] %>");

			if (viewModel.uploadProvProfilesProgress.isIdle && viewModel.uploadProvProfilesProgress.statusMessage !== null) {
				viewModel.uploadProvProfilesProgress.reset();
			}

			provProfile.delete().then(function() {
				viewModel.deleteProvProfileProgress.success();

				loadProvProfiles(true);
			}, function(error) {
				viewModel.deleteProvProfileProgress.error(error);
			});
		});
	};

	viewModel.getDetails = function(provProfile) {
		viewModel.provProfileConfigs[provProfile.databaseID].getDetailsProgress.start("<%= data[:strings][:code_signing][:prov_profile][:get_details_progress][:in_progress] %>");
		if (viewModel.uploadProvProfilesProgress.isIdle && viewModel.uploadProvProfilesProgress.statusMessage !== null) {
			viewModel.uploadProvProfilesProgress.reset();
		}

		return $q(function(resolve, reject) {
			return requestService.getDetailsOfProvProfile(provProfile.databaseID).then(function(data) {
				provProfile.uuid = data.uuid;
				provProfile.expiresAt = data.expiresAt;
				provProfile.exportType = data.exportType;
				provProfile.teamName = data.teamName;
				provProfile.teamID = data.teamID;
				provProfile.bundleID = data.bundleID;
				provProfile.developerCertificateIdentities = _.map(data.developerCertificateIdentities, function(anIdentity) {
					return {
						statusCSSclass: "in-progress",
						commonName: anIdentity.commonName,
						startDate: anIdentity.startDate,
						endDate: anIdentity.endDate,
						teamName: anIdentity.teamName,
						teamID: anIdentity.teamID,
						serial: anIdentity.serial
					};
				});
				provProfile.provisionedDevices = _.map(data.provisionedDevices, function(aProvisionedDevice) {
					return {
						udid: aProvisionedDevice.udid,
						statusCSSclass:	"in-progress",
						registeredBy: undefined
					};
				});
				provProfile.capabilityKeys = data.capabilityKeys;

				viewModel.provProfileConfigs[provProfile.databaseID].getDetailsProgress.success();
				resolve();
			}, function(error) {
				viewModel.provProfileConfigs[provProfile.databaseID].getDetailsProgress.error(error);
				reject(error);
			});
		});
	};

	function validateDetails(provProfile) {
		viewModel.provProfileConfigs[provProfile.databaseID].validationProgress.start("<%= data[:strings][:code_signing][:prov_profile][:get_details_progress][:in_progress] %>");
		if (viewModel.uploadProvProfilesProgress.isIdle && viewModel.uploadProvProfilesProgress.statusMessage !== null) {
			viewModel.uploadProvProfilesProgress.reset();
		}

		$q.all([
			validateTestDevices(provProfile),
			validateCertificates(provProfile)
		]).then(function() {
			if (viewModel.provProfileConfigs[provProfile.databaseID].validationStatuses.certificateValidationsStatus == "error" || viewModel.provProfileConfigs[provProfile.databaseID].validationStatuses.deviceValidation == "error") {
				viewModel.provProfileConfigs[provProfile.databaseID].validationStatuses.globalValidationStatus = "error";
			}
			else {
				viewModel.provProfileConfigs[provProfile.databaseID].validationStatuses.globalValidationStatus = "success";
			}

			viewModel.provProfileConfigs[provProfile.databaseID].validationProgress.success();
		}, function(error) {
			viewModel.provProfileConfigs[provProfile.databaseID].validationProgress.error(error);
		});
	}

	viewModel.capabilityDescriptionsOfProvProfile = function() {
		return _.compact(_.uniq(_.map(viewModel.selectedProvProfile.capabilityKeys, function(aCapabilityKey) {
			return ProvProfile.descriptionForCapabilityKey(aCapabilityKey);
		})));
	};

	function validateTestDevices(provProfile) {
		viewModel.validateTestDevicesProgress.start("<%= data[:strings][:code_signing][:prov_profile][:validate_test_devices][:in_progress] %>");

		return $q(function(resolve, reject) {
			requestService.fetchAllTestDevicesOfRepository().then(function(registeredTestDevices) {
				_.each(provProfile.provisionedDevices, function(aProvisionedDevice) {
					var registeredTestDeviceOnBitrise = _.find(registeredTestDevices.devices, {deviceIdentifier: aProvisionedDevice.udid});

					if (registeredTestDeviceOnBitrise) {
						aProvisionedDevice.statusCSSclass = "success";
						aProvisionedDevice.registeredBy = registeredTestDeviceOnBitrise.owner.username;
					}
					else {
						aProvisionedDevice.statusCSSclass = "error";
						aProvisionedDevice.registeredBy = undefined;
					}
				});

				viewModel.provProfileConfigs[provProfile.databaseID].validationStatuses.deviceValidationStatus = !_.any(provProfile.provisionedDevices, {statusCSSclass: "error"}) ? "success" : "error";

				viewModel.validateTestDevicesProgress.success();
				resolve();
			}, function(error) {
				viewModel.validateTestDevicesProgress.error(error);
				reject();
			});
		});
	}

	function validateCertificates(provProfile, originalDeferer) {
		var deferer = originalDeferer ? originalDeferer : $q.defer();

		if (!viewModel.validateCertificatesProgress.isInProgress) {
			viewModel.validateCertificatesProgress.start("<%= data[:strings][:code_signing][:prov_profile][:validate_certificates][:in_progress] %>");
		}
		
		if (certificateService.progress.isInProgress) {
			$timeout(function() {
				validateCertificates(provProfile, deferer);
			}, validateCertificatesReloadIntervalInSeconds * 1000);
		}
		else if (certificateService.progress.isError) {
			deferer.reject();
		}
		else {
			_.each(provProfile.developerCertificateIdentities, function(anIdentity) {
				if (certificateService.progress.isError) {
					anIdentity.statusCSSclass = "error";
				}
				else {
					var isIdentityRegistered = _.any(certificateService.certificateDetailStateMaps, function(aCertificateDetailStateMapsItem) {
						return _.find(aCertificateDetailStateMapsItem.certificate.details, function(aCertificateIdentity) {
							return aCertificateIdentity.serial == anIdentity.serial;
						});
					});

					anIdentity.statusCSSclass = isIdentityRegistered ? "success" : "error";
				}
			});

			viewModel.provProfileConfigs[provProfile.databaseID].validationStatuses.certificateValidationsStatus = !_.any(provProfile.developerCertificateIdentities, {statusCSSclass: "error"}) ? "success" : "error";

			viewModel.validateCertificatesProgress.success();

			deferer.resolve();
		}

		return deferer.promise;
	}

	function isExposeGetterSetterForProvProfile(aProvProfile, progress) {
		return function(isExpose) {
			if (isExpose === undefined) {
				return aProvProfile.isExpose;
			}

			var oldIsExpose = aProvProfile.isExpose;
			aProvProfile.isExpose = isExpose;

			progress.start();
			requestService.updateProvProfileIsExposeState(aProvProfile.databaseID, aProvProfile.isExpose).then(function() {
				progress.success();
			}, function(error) {
				aProvProfile.isExpose = oldIsExpose;
				progress.reset();
				Popup.showErrorPopup(error.message); 
			});
		}
	};

	viewModel.showProvProfileValidatedDetails = function(aSelectedProvProfile) {
		viewModel.selectedProvProfile = aSelectedProvProfile;

		viewModel.selectedMenu = viewModel.menus[0];

		viewModel.validatedProvProfileDetailsPopup.isVisible = true;
	};

	loadProvProfiles();

});

})();
