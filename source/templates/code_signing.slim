.tab-code-signing[ng-controller="CodeSigningController as codeSigningCtrl"]
	section.progress-indicator[progress-model="codeSigningCtrl.loadProgress"]
	section.certificate-help[ng-if="codeSigningCtrl.shouldShowCodeSigningHints"]
		ul
			li.codesigndoc
				div
					h2 == data[:strings][:code_signing][:certificate_help][:codesigndoc][:title]
					p == data[:strings][:code_signing][:certificate_help][:codesigndoc][:details]
					code == data[:strings][:code_signing][:certificate_help][:codesigndoc][:code]
			li.upload
				div
					h2 == data[:strings][:code_signing][:certificate_help][:upload][:title]
					p == data[:strings][:code_signing][:certificate_help][:upload][:details]
			li.add-step
				div
					h2 == data[:strings][:code_signing][:certificate_help][:add_step][:title]
					p == data[:strings][:code_signing][:certificate_help][:add_step][:details]
		button.hide[ng-click="codeSigningCtrl.codeSigningHintsDismissed()"] = svg("cross_slim")
	section.cardo.uppercase.slim.files.provisioning-profiles[ng-controller="ProvProfileController as provProfileCtrl" ng-if="codeSigningCtrl.areAnyOfTheProjectTypesAvailable(['ios', 'osx', 'macos', 'xamarin'])"]
		header
			h2.label
				span == data[:strings][:code_signing][:prov_profile][:header][:card_title]
				span<[ng-if="provProfileCtrl.provProfiles.length > 0" ng-bind="'(' + provProfileCtrl.provProfiles.length + '/' + provProfileCtrl.maximumProvProfilesCount + ')'"]
			h2.label.expose[ng-if="provProfileCtrl.provProfiles.length > 0"]
				span.long-version == data[:strings][:code_signing][:prov_profile][:header][:expose_for_pull_requests]
				span.short-version == data[:strings][:code_signing][:prov_profile][:header][:expose_for_pr]
		article
			p.progress-indicator[progress-model="provProfileCtrl.loadProvProfilesProgress"]
			p.progress-indicator[progress-model="provProfileCtrl.deleteProvProfileProgress"]
			div[ng-if="provProfileCtrl.loadProvProfilesProgress.isIdle && !provProfileCtrl.deleteProvProfileProgress.isInProgress"]
				p.notification.no-icon[ng-if="provProfileCtrl.provProfiles.length == 0"] == data[:strings][:code_signing][:prov_profile][:no_prov_profiles_added_yet]
				ul.uploaded-files
					li.uploaded-file[ng-repeat="provProfile in provProfileCtrl.provProfiles"]
						.details
							.icon = svg("code_signing/sheet-prov_profile")
							.column.left
								.detail.name[ng-bind="provProfile.displayName()"]
								div[ng-if="provProfileCtrl.provProfileConfigs[provProfile.databaseID].getDetailsProgress.isIdle"]
									.detail.code.uuid[ng-bind="provProfile.uuid" ng-if="provProfile.uuid"]
									.detail[ng-if="provProfile.expiresAt"]
										strong.label>[ng-if="!dateService.isDateExpired(provProfile.expiresAt)"] == data[:strings][:code_signing][:prov_profile][:article][:details][:expires_on_label] + ":"
										.label.warning>[ng-if="dateService.isDateExpired(provProfile.expiresAt)"] == data[:strings][:code_signing][:prov_profile][:article][:details][:expired_label] + ":"
										time[ng-bind="(provProfile.expiresAt | date: 'MMM, dd, yyyy, HH:mm (UTC)' : 'UTC')" datetime="{{ provProfile.expiresAt | datetimeValue }}"]
								p.progress-indicator[progress-model="provProfileCtrl.provProfileConfigs[provProfile.databaseID].getDetailsProgress"]
									span.error-content
										span[ng-bind-html="provProfileCtrl.provProfileConfigs[provProfile.databaseID].getDetailsProgress.statusMessage"]
										a>[href="javascript:void(0)" ng-click="provProfileCtrl.getDetails(provProfile)"] == data[:strings][:code_signing][:prov_profile][:get_details_progress][:try_again_postfix]
							.column.right[ng-if="provProfileCtrl.provProfileConfigs[provProfile.databaseID].getDetailsProgress.isIdle"]
								.detail[ng-if="provProfile.exportType"]
									strong.label> == data[:strings][:code_signing][:prov_profile][:article][:details][:export_type_label] + ":"
									span[ng-bind="provProfile.exportType"]
								.detail[ng-if="provProfile.teamName && provProfile.teamID"]
									strong.label> == data[:strings][:code_signing][:prov_profile][:article][:details][:team_data_label] + ":"
									span[ng-bind="provProfile.teamName + ' (' + provProfile.teamID + ')'"]
								.detail[ng-if="provProfile.bundleID"]
									strong.label> == data[:strings][:code_signing][:prov_profile][:article][:details][:bundle_id_label] + ":"
									span[ng-bind="provProfile.bundleID"]
							.expose-and-actions
								.expose[trigger-popover="#{ data[:strings][:code_signing][:expose_for_pr_popover_content] }"]
									checkbox[ng-model="provProfileCtrl.provProfileConfigs[provProfile.databaseID].isExposeGetterSetter" ng-disabled="provProfileCtrl.provProfileConfigs[provProfile.databaseID].isExposeGetterSetterProgress.isInProgress" ng-model-options="{getterSetter: true}" checkbox-id-expression="'prov-profile-is-expose-checkbox-' + $index"]
									label.on-small[for="'prov-profile-is-expose-checkbox-' + $index"] == data[:strings][:code_signing][:prov_profile][:article][:expose][:is_expose]
								.actions[floating-menu toggle="provProfileCtrl.provProfileConfigs[provProfile.databaseID].isMenuVisible"]
									button.dropdown-toggle[ng-click="provProfileCtrl.provProfileConfigs[provProfile.databaseID].isMenuVisible = !provProfileCtrl.provProfileConfigs[provProfile.databaseID].isMenuVisible"] = svg("three-horizontal-dots")
									.dropdown[ng-if="provProfileCtrl.provProfileConfigs[provProfile.databaseID].isMenuVisible"]
										a.dropdown-option.download[href="{{ provProfile.download() }}"] == data[:strings][:code_signing][:prov_profile][:article][:actions][:download]
										button.dropdown-option.delete[ng-click="provProfileCtrl.deleteProvProfile(provProfile)"] == data[:strings][:code_signing][:prov_profile][:article][:actions][:delete]
								.actions.small
									a.option.download[href="{{ provProfile.download() }}"] == data[:strings][:code_signing][:prov_profile][:article][:actions][:download]
									button.option.delete[ng-click="provProfileCtrl.deleteProvProfile(provProfile)"] == data[:strings][:code_signing][:prov_profile][:article][:actions][:delete]
						.show-more-details[ng-if="provProfileCtrl.provProfileConfigs[provProfile.databaseID].getDetailsProgress.isIdle"]
							button.show-more[ng-click="provProfileCtrl.showProvProfileValidatedDetails(provProfile)"]
								span.container
									span.icon[ng-class="provProfileCtrl.provProfileConfigs[provProfile.databaseID].validationStatuses.globalValidationStatus"] = svg("dot")
									span == data[:strings][:code_signing][:prov_profile][:article][:details][:show_prov_profile_validated_details_button]
									span.arrow = svg("arrow_slim-down")
				p.notification.error[ng-if="provProfileCtrl.provProfiles.length >= provProfileCtrl.maximumProvProfilesCount"] == data[:strings][:code_signing][:prov_profile][:upload_count_limit_reached]
				p.progress-indicator[progress-model="provProfileCtrl.uploadProvProfilesProgress"]
				.file-upload[ng-if="!provProfileCtrl.uploadProvProfilesProgress.isInProgress && provProfileCtrl.provProfiles.length < provProfileCtrl.maximumProvProfilesCount"]
					file-uploader[multiple onupload="provProfileCtrl.uploadProvProfiles()" model="provProfileCtrl.provProfileUploader" on-file-change="provProfileCtrl.filesSelectedForUpload($files)"]
						strong == data[:strings][:code_signing][:prov_profile][:upload_action]
						em == data[:strings][:code_signing][:prov_profile][:upload_instructions]
		popup[model="provProfileCtrl.validatedProvProfileDetailsPopup"]
			.popup-body.snowflake#prov-profile-details-popup-body.vertical-scroll
				header.closeable.left-aligned
					span.popup-title
						strong[ng-bind="provProfileCtrl.selectedProvProfile.displayName()"]
					span.popup-close[ng-click="provProfileCtrl.validatedProvProfileDetailsPopup.isVisible = false"] = svg("cross")
				article
					aside.sidebar
						.menu
							button.menu-option[ng-repeat="menu in provProfileCtrl.menus" ng-click="provProfileCtrl.selectedMenu = menu" class="{{ menu.cssClass }}" ng-class="{'selected': menu == provProfileCtrl.selectedMenu}"]
								span.title[ng-bind="menu.title"]
								span.status[ng-class="menu.validationStatus()"] = svg("dot")
								span.arrow = svg("arrow_slim-down")
						.menu.small
							select.menu-selector[ng-model="provProfileCtrl.selectedMenu" ng-model-options="{getterSetter: true}" ng-options="menu.title for menu in provProfileCtrl.menus" ng-class="{ 'selected' : menu == provProfileCtrl.selectedMenu }"]
					.content.vertical-scroll[ng-switch="provProfileCtrl.selectedMenu.id"]
						ul.matching-certificates[ng-switch-when="matching-certificates"]
							li.identity[ng-repeat="identity in provProfileCtrl.selectedProvProfile.developerCertificateIdentities"]
								.status[ng-class="identity.statusCSSclass"]
									span[ng-if="identity.statusCSSclass == 'in-progress'"] = svg("dot")
									span[ng-if="identity.statusCSSclass == 'error'"] = svg("triangle")
									span[ng-if="identity.statusCSSclass == 'success'"] = svg("check-in-circle")
								.details
									.common-name[ng-bind="identity.commonName"]
									.serial[ng-bind="identity.serial"]
						ul.devices[ng-switch-when="devices"]
							li.device[ng-repeat="aProvisionedDevice in provProfileCtrl.selectedProvProfile.provisionedDevices"]
								.status[ng-class="aProvisionedDevice.statusCSSclass"]
									span[ng-if="aProvisionedDevice.statusCSSclass == 'in-progress'"] = svg("dot")
									span[ng-if="aProvisionedDevice.statusCSSclass == 'error'"] = svg("triangle")
									span[ng-if="aProvisionedDevice.statusCSSclass == 'success'"] = svg("check-in-circle")
								.details
									.udid-info
										strong.label> == data[:strings][:code_signing][:prov_profile][:prov_profile_details_popup][:devices][:udid] + ":"
										span.udid[ng-bind="aProvisionedDevice.udid"]
									.registration-info
										span.not-registered[ng-if="aProvisionedDevice.statusCSSclass == 'error'"]
											strong == data[:strings][:code_signing][:prov_profile][:prov_profile_details_popup][:device_registration_details][:not_registered]
										span.registered[ng-if="aProvisionedDevice.statusCSSclass == 'success'"]
											strong == data[:strings][:code_signing][:prov_profile][:prov_profile_details_popup][:device_registration_details][:registered]
											.username[ng-bind="'@' + aProvisionedDevice.registeredBy"]
						ul.capabilities[ng-switch-when="capabilities"]
							li.capability[ng-repeat="description in provProfileCtrl.capabilityDescriptionsOfProvProfile() track by $index" ng-bind="description"]
	section.cardo.uppercase.slim.files.certificates[ng-controller="CertificateController as certificateCtrl" ng-if="codeSigningCtrl.areAnyOfTheProjectTypesAvailable(['ios', 'osx', 'macos', 'xamarin'])"]
		header
			h2.label.title
				span == data[:strings][:code_signing][:certificate][:header][:card_title]
				span<[ng-if="certificateCtrl.certificates.length > 0" ng-bind="'(' + certificateCtrl.certificates.length + '/' + certificateCtrl.maximumCertificatesCount + ')'"]
			h2.label.password[ng-if="certificateCtrl.certificates.length > 0"]
				span == data[:strings][:code_signing][:certificate][:header][:password]
			h2.label.expose[ng-if="certificateCtrl.certificates.length > 0"]
				span.long-version == data[:strings][:code_signing][:certificate][:header][:expose_for_pull_requests]
				span.short-version == data[:strings][:code_signing][:certificate][:header][:expose_for_pr]
		article
			p.progress-indicator[progress-model="certificateCtrl.loadCertificatesProgress"]
			p.progress-indicator[progress-model="certificateCtrl.deleteCertificateProgress"]
			p.progress-indicator[progress-model="certificateCtrl.changePasswordProgress"]
			div[ng-if="certificateCtrl.loadCertificatesProgress.isIdle && !certificateCtrl.deleteCertificateProgress.isInProgress && !certificateCtrl.changePasswordProgress.isInProgress"]
				p.notification.no-icon[ng-if="certificateCtrl.certificates.length == 0"] == data[:strings][:code_signing][:certificate][:no_certificates_added_yet]
				ul.uploaded-files
					li.uploaded-file[ng-repeat="certificate in certificateCtrl.certificates" ng-init="showPassword = false"]
						.details
							.icon = svg("code_signing/sheet-certificate")
							.column.left
								div[ng-if="!certificate.details || certificate.details.length > 1 || !certificateCtrl.certificateSettings[certificate.databaseID].progress.isIdle"]
									.detail.name[ng-bind="certificate.uploadFileName"]
								div[ng-if="certificate.details && certificate.details.length == 1 && certificateCtrl.certificateSettings[certificate.databaseID].progress.isIdle"]
									.detail.name[ng-bind="certificate.details[0].commonName"]
									.detail.code.serial[ng-bind="certificate.details[0].serial"]
									.detail
										strong.label> == data[:strings][:code_signing][:certificate][:article][:details][:team_data_label] + ":"
										span[ng-bind="certificate.details[0].teamName + ' (' + certificate.details[0].teamID + ')'"]
									.detail
										strong.label>[ng-if="!dateService.isDateExpired(certificate.details[0].endDate)"] == data[:strings][:code_signing][:certificate][:article][:details][:expires_on_label] + ":"
										.label.warning>[ng-if="dateService.isDateExpired(certificate.details[0].endDate)"] == data[:strings][:code_signing][:certificate][:article][:details][:expired_label] + ":"
										time[ng-bind="(certificate.details[0].endDate | date: 'MMM, dd, yyyy, HH:mm (UTC)' : 'UTC')" datetime="{{ certificate.details[0].endDate | datetimeValue }}"]
								p.progress-indicator[progress-model="certificateCtrl.certificateSettings[certificate.databaseID].progress"]
									span.error-content
										span[ng-bind-html="certificateCtrl.certificateSettings[certificate.databaseID].progress.statusMessage"]
										a>[href="javascript:void(0)" ng-click="certificateCtrl.getDetails(certificate)"] == data[:strings][:code_signing][:certificate][:get_details_progress][:try_again_postfix]
							.column.right.password
								.label.on-small == data[:strings][:code_signing][:certificate][:header][:password]
								form[ng-submit="certificateCtrl.changePassword()" autocomplete="off" name="certificatePasswordForm"]
									.password-field-wrapper
										input.password-field[type="{{ showPassword ? 'text' : 'password' }}" ng-model="certificate.password" ng-class="{'invalid' : certificateCtrl.certificateSettings[certificate.databaseID].isInvalidPassword}" name="password" ng-focus="certificateCtrl.changePasswordSelected(certificate)"]
										eye-checkbox[ng-model="showPassword" checkbox-id-expression="'code-signin-certificate-show-password-checkbox-' + $index"]
									.change-actions[ng-if="certificate == certificateCtrl.passwordEditedCertificate"]
										input.action.ok.rebo.small.green.submit[type="submit" value="#{ data[:strings][:code_signing][:certificate][:change_password_save] }"]
										button.action.cancel.rebo.small.danger[type="button" ng-click="certificateCtrl.cancelPasswordChange()"] == data[:strings][:code_signing][:certificate][:change_password_cancel]
								.error-notice[ng-if="certificateCtrl.certificateSettings[certificate.databaseID].isInvalidPassword && certificate != certificateCtrl.passwordEditedCertificate && certificateCtrl.certificateSettings[certificate.databaseID].progress.isIdle"]
									span.icon = svg("triangle")
									span == data[:strings][:code_signing][:certificate][:article][:password_edit][:incorrect_password_notice]
							.expose-and-actions
								.expose[trigger-popover="#{ data[:strings][:code_signing][:expose_for_pr_popover_content] }"]
									checkbox[ng-model="certificateCtrl.certificateSettings[certificate.databaseID].isExposeGetterSetter" ng-disabled="certificateCtrl.certificateSettings[certificate.databaseID].isExposeGetterSetterProgress.isInProgress" ng-model-options="{getterSetter: true}" checkbox-id-expression="'code-signin-certificate-is-expose-checkbox-' + $index"]
									label.on-small[for="'code-signin-certificate-is-expose-checkbox-' + $index"] == data[:strings][:code_signing][:certificate][:article][:expose][:is_expose]
								.actions[floating-menu toggle="certificateCtrl.certificateSettings[certificate.databaseID].isMenuVisible"]
									button.dropdown-toggle[ng-click="certificateCtrl.certificateSettings[certificate.databaseID].isMenuVisible = !certificateCtrl.certificateSettings[certificate.databaseID].isMenuVisible"] = svg("three-horizontal-dots")
									.dropdown[ng-if="certificateCtrl.certificateSettings[certificate.databaseID].isMenuVisible"]
										a.dropdown-option.download[href="{{ certificate.download() }}"] == data[:strings][:code_signing][:certificate][:article][:actions][:download]
										button.dropdown-option.delete[ng-click="certificateCtrl.deleteCertificate(certificate)"] == data[:strings][:code_signing][:certificate][:article][:actions][:delete]
								.actions.small
									a.option.download[href="{{ certificate.download() }}"] == data[:strings][:code_signing][:certificate][:article][:actions][:download]
									button.option.delete[ng-click="certificateCtrl.deleteCertificate(certificate)"] == data[:strings][:code_signing][:certificate][:article][:actions][:delete]
						.show-more-details[ng-if="certificate.details && certificate.details.length > 1 && certificateCtrl.certificateSettings[certificate.databaseID].progress.isIdle && !certificateCtrl.certificateSettings[certificate.databaseID].isInvalidPassword"]
							p.show-more-info == data[:strings][:code_signing][:certificate][:article][:details][:multiple_identities]
							button.show-more[ng-click="certificateCtrl.showIncludedIdentities(certificate)"]
								span.container
									span.icon = svg("member")
									span == data[:strings][:code_signing][:certificate][:article][:details][:show_included_identities_button_label]
									span.arrow = svg("arrow_slim-down")
				p.notification.error[ng-if="certificateCtrl.certificates.length >= certificateCtrl.maximumCertificatesCount"] == data[:strings][:code_signing][:certificate][:upload_count_limit_reached]
				p.progress-indicator[progress-model="certificateCtrl.uploadCertificatesProgress"]
				.file-upload[ng-if="!certificateCtrl.uploadCertificatesProgress.isInProgress && certificateCtrl.certificates.length < certificateCtrl.maximumCertificatesCount"]
					file-uploader[multiple onupload="certificateCtrl.uploadCertificates()" model="certificateCtrl.certificateUploader" on-file-change="certificateCtrl.filesSelectedForUpload($files)"]
						strong == data[:strings][:code_signing][:certificate][:upload_action]
						em == data[:strings][:code_signing][:certificate][:upload_instructions]
		popup[model="certificateCtrl.listOfIdentitiesPopup"]
			.popup-body.snowflake#list-identities-popup-body.vertical-scroll
				header.closeable.left-aligned
					.popup-title
						.label == data[:strings][:code_signing][:certificate][:identities_list_popup][:header][:title]
						.certificate-name[ng-bind="certificateCtrl.selectedCertificate.uploadFileName"]
					button.popup-close[ng-click="certificateCtrl.listOfIdentitiesPopup.isVisible = false"] = svg("cross")
				article.vertical-scroll
					ul.identities
						li.identity[ng-repeat="identity in certificateCtrl.selectedCertificate.details"]
							.column.left
								.detail.common-name[ng-bind="identity.commonName"]
								.detail.serial[ng-bind="identity.serial"]
							.column.right
								.detail.team-data
									strong.label> == data[:strings][:code_signing][:certificate][:article][:details][:team_data_label] + ":"
									span[ng-bind="identity.teamName + ' (' + identity.teamID + ')'"]
								.detail.expire-at[ng-class="{'expired': dateService.isDateExpired(identity.endDate)}"]
									strong.label> == data[:strings][:code_signing][:certificate][:article][:details][:expires_on_label] + ":"
									strong.label.expired-label> == data[:strings][:code_signing][:certificate][:article][:details][:expired_label] + ":"
									time[ng-bind="(identity.endDate | date: 'MMM, dd, yyyy, HH:mm (UTC)' : 'UTC')" datetime="{{ identity.endDate | datetimeValue }}"]
	section.cardo.uppercase.slim.files.android-keystore[ng-controller="AndroidKeystoreController as androidKeystoreCtrl" ng-if="codeSigningCtrl.areAnyOfTheProjectTypesAvailable(['android', 'xamarin'])" ng-class="{'expired' : dateService.isDateExpired(identity.endDate) }"]
		header
			h2.label
				span == data[:strings][:code_signing][:android_keystore][:header][:card_title]
			h2.label.expose[ng-if="androidKeystoreCtrl.keystoreFile"]
				span.long-version == data[:strings][:code_signing][:android_keystore][:header][:expose_for_pull_requests]
				span.short-version == data[:strings][:code_signing][:android_keystore][:header][:expose_for_pr]
		article
			p.progress-indicator[progress-model="androidKeystoreCtrl.loadProgress"]
			p.progress-indicator[progress-model="androidKeystoreCtrl.actionProgress"]
			div[ng-if="androidKeystoreCtrl.loadProgress.isIdle && !androidKeystoreCtrl.actionProgress.isInProgress"]
				p.notification.no-icon[ng-if="!androidKeystoreCtrl.keystoreFile"] == data[:strings][:code_signing][:android_keystore][:no_keystore_file]
				div[ng-if="androidKeystoreCtrl.keystoreFile"]
					.uploaded-files
						.uploaded-file
							.details
								.icon = svg("code_signing/sheet-certificate")
								.column.left
									.detail.name[ng-bind="androidKeystoreCtrl.keystoreFile.displayName()"]
									.detail.code.env-var-key[ng-bind="KeystoreFile.downloadURLEnvVarKey() | prettifiedKey"]
								.expose-and-actions
									.expose[trigger-popover="#{ data[:strings][:code_signing][:expose_for_pr_popover_content] }"]
										checkbox[ng-model="androidKeystoreCtrl.keystoreFileIsExposeGetterSetterConfig.getterSetter" ng-disabled="androidKeystoreCtrl.keystoreFileIsExposeGetterSetterConfig.progress.isInProgress" ng-model-options="{getterSetter: true}" checkbox-id-expression="'code-signin-android-keystore-is-expose-checkbox-' + $index"]
										label.on-small[for="'code-signin-android-keystore-is-expose-checkbox-' + $index"] == data[:strings][:code_signing][:android_keystore][:expose][:is_expose]
									.actions[floating-menu toggle="androidKeystoreCtrl.isMenuVisible"]
										button.dropdown-toggle[ng-click="androidKeystoreCtrl.isMenuVisible = !androidKeystoreCtrl.isMenuVisible"] = svg("three-horizontal-dots")
										.dropdown[ng-if="androidKeystoreCtrl.isMenuVisible"]
											a.dropdown-option.download[href="{{ androidKeystoreCtrl.keystoreFile.download() }}"] == data[:strings][:code_signing][:android_keystore][:article][:actions][:download]
											button.dropdown-option.delete[ng-click="androidKeystoreCtrl.deleteKeystoreFile()"] == data[:strings][:code_signing][:android_keystore][:article][:actions][:delete]
									.actions.small
										a.option.download[href="{{ androidKeystoreCtrl.keystoreFile.download() }}"] == data[:strings][:code_signing][:android_keystore][:article][:actions][:download]
										button.option.delete[ng-click="androidKeystoreCtrl.deleteKeystoreFile()"] == data[:strings][:code_signing][:android_keystore][:article][:actions][:delete]
					form.keystore-metadata[name="androidKeystoreCtrl.keystoreMetadataForm" ng-submit="androidKeystoreCtrl.saveMetadata()" autocomplete="off"]
						section
							p
								span> == data[:strings][:code_signing][:android_keystore][:keystore_password_as]
								code.env-var[ng-bind="KeystoreFile.androidKeystorePasswordEnvVarKey | prettifiedKey"]
							input.env-var[type="{{ androidKeystoreCtrl.showPassword ? 'text' : 'password' }}" name="password" required ng-model="androidKeystoreCtrl.keystoreFile.password" placeholder="#{ data[:strings][:code_signing][:android_keystore][:password_placeholder] }"]
							.show-password
								checkbox.small[ng-model="androidKeystoreCtrl.showPassword" checkbox-id-expression="'code-signin-android-keystore-show-password-checkbox-' + $index"]
								label[for="'code-signin-android-keystore-show-password-checkbox-' + $index"] == data[:strings][:code_signing][:android_keystore][:show_password]
						section
							p
								span> == data[:strings][:code_signing][:android_keystore][:keystore_alias_as]
								code.env-var[ng-bind="KeystoreFile.androidKeystoreAliasEnvVarKey | prettifiedKey"]
							input.env-var[type="{{ androidKeystoreCtrl.showAlias ? 'text' : 'password' }}" name="alias" required ng-model="androidKeystoreCtrl.keystoreFile.alias" placeholder="#{ data[:strings][:code_signing][:android_keystore][:alias_placeholder] }"]
							.show-password
								checkbox.small[ng-model="androidKeystoreCtrl.showAlias" checkbox-id-expression="'code-signin-android-keystore-show-alias-checkbox-' + $index"]
								label[for="'code-signin-android-keystore-show-alias-checkbox-' + $index"] == data[:strings][:code_signing][:android_keystore][:show_alias]
						section
							p
								span> == data[:strings][:code_signing][:android_keystore][:private_key_password_as]
								code.env-var[ng-bind="KeystoreFile.androidKeystorePrivateKeyPasswordEnvVarKey | prettifiedKey"]
							input.env-var[type="{{ androidKeystoreCtrl.showPrivateKeyPassword ? 'text' : 'password' }}" name="privateKeyPassword" required ng-model="androidKeystoreCtrl.keystoreFile.privateKeyPassword" placeholder="#{ data[:strings][:code_signing][:android_keystore][:private_key_password_placeholder] }"]
							.show-password
								checkbox.small[ng-model="androidKeystoreCtrl.showPrivateKeyPassword" checkbox-id-expression="'code-signin-android-keystore-show-private-key-password-checkbox-' + $index"]
								label[for="'code-signin-android-keystore-show-private-key-password-checkbox-' + $index"] == data[:strings][:code_signing][:android_keystore][:show_private_key_password]
						input.rebo.big.green.save.submit[type="submit" value="#{ data[:strings][:code_signing][:android_keystore][:save_metadata] }"]
						button.rebo.big.grey.reset[type="button" ng-click="androidKeystoreCtrl.resetMetadata()"] == data[:strings][:code_signing][:android_keystore][:reset_to_saved]
			p.notification.error[ng-if="androidKeystoreCtrl.genericFileAndKeystoreFileCountSum >= androidKeystoreCtrl.maximumGenericFileAndKeystoreFileCountSum"] == data[:strings][:code_signing][:generic_file][:upload_count_limit_reached]
			.file-upload[ng-if="!androidKeystoreCtrl.keystoreFile && !androidKeystoreCtrl.actionProgress.isInProgress && androidKeystoreCtrl.genericFileAndKeystoreFileCountSum < androidKeystoreCtrl.maximumGenericFileAndKeystoreFileCountSum"]
				file-uploader[onupload="androidKeystoreCtrl.uploadKeystoreFile()" model="androidKeystoreCtrl.keystoreFileUploader" on-file-change="$files.length > 0 ? androidKeystoreCtrl.uploadedKeystoreFile.updateFile($files[0]) : null"]
					strong[ng-bind="androidKeystoreCtrl.uploadInstruction"]
					em == data[:strings][:code_signing][:android_keystore][:upload_instructions]
	section.cardo.uppercase.slim.files.generic-files[ng-controller="GenericFileController as genericFileCtrl"]
		header
			h2.label
				span == data[:strings][:code_signing][:generic_file][:header][:card_title]
				span<[ng-if="genericFileCtrl.genericFiles.length > 0" ng-bind="'(' + genericFileCtrl.genericFiles.length + '/' + genericFileCtrl.maximumGenericFilesCount + ')'"]
			h2.label.expose[ng-if="genericFileCtrl.genericFiles.length > 0"]
				span.long-version == data[:strings][:code_signing][:generic_file][:header][:expose_for_pull_requests]
				span.short-version == data[:strings][:code_signing][:generic_file][:header][:expose_for_pr]
		article
			p.progress-indicator[progress-model="genericFileCtrl.loadGenericFilesProgress"]
			p.progress-indicator[progress-model="genericFileCtrl.deleteGenericFileProgress"]
			div[ng-if="genericFileCtrl.loadGenericFilesProgress.isIdle && !genericFileCtrl.deleteGenericFileProgress.isInProgress"]
				p.notification.no-icon[ng-if="genericFileCtrl.genericFiles.length == 0"] == data[:strings][:code_signing][:generic_file][:no_files_added_yet]
				ul.uploaded-files
					li.uploaded-file[ng-repeat="genericFile in genericFileCtrl.genericFiles"]
						.details
							.icon = svg("code_signing/sheet-generic_file")
							.column
								.detail.name[ng-bind="genericFile.displayName()"]
								.detail.code.env-var-key[ng-bind="genericFile.downloadURLEnvVarKey() | prettifiedKey"]
							.expose-and-actions
								.expose[trigger-popover="#{ data[:strings][:code_signing][:expose_for_pr_popover_content] }"]
									checkbox[ng-model="genericFileCtrl.genericFileIsExposeGetterSetterConfigs[$index].getterSetter" ng-disabled="genericFileCtrl.genericFileIsExposeGetterSetterConfigs[$index].progress.isInProgress" ng-model-options="{getterSetter: true}" checkbox-id-expression="'generic-file-is-expose-checkbox-' + $index"]
									label.on-small[for="'generic-file-is-expose-checkbox-' + $index"] == data[:strings][:code_signing][:generic_file][:expose][:is_expose]
								.actions[floating-menu toggle="genericFileCtrl.genericFileSettings[genericFile.databaseID].isMenuVisible"]
									button.dropdown-toggle[ng-click="genericFileCtrl.genericFileSettings[genericFile.databaseID].isMenuVisible = !genericFileCtrl.genericFileSettings[genericFile.databaseID].isMenuVisible"] = svg("three-horizontal-dots")
									.dropdown[ng-if="genericFileCtrl.genericFileSettings[genericFile.databaseID].isMenuVisible"]
										a.dropdown-option.download[href="{{ genericFile.download() }}"] == data[:strings][:code_signing][:generic_file][:article][:actions][:download]
										button.dropdown-option.delete[ng-click="genericFileCtrl.deleteGenericFile(genericFile)"] == data[:strings][:code_signing][:generic_file][:article][:actions][:delete]
								.actions.small
									a.option.download[href="{{ genericFile.download() }}"] == data[:strings][:code_signing][:generic_file][:article][:actions][:download]
									button.option.delete[ng-click="genericFileCtrl.deleteGenericFile(genericFile)"] == data[:strings][:code_signing][:generic_file][:article][:actions][:delete]
				p.notification.error[ng-if="genericFileCtrl.genericFiles.length >= genericFileCtrl.maximumGenericFilesCount"] == data[:strings][:code_signing][:generic_file][:upload_count_limit_reached]
				p.progress-indicator[progress-model="genericFileCtrl.uploadGenericFileProgress"]
				.file-upload[ng-if="!genericFileCtrl.uploadGenericFileProgress.isInProgress && genericFileCtrl.genericFiles.length < genericFileCtrl.maximumGenericFilesCount"]
					p == data[:strings][:code_signing][:generic_file][:env_var_details]
					code.env-var[ng-bind="genericFileCtrl.downloadURLEnvVarKeyPrettifiedPreview()"]
					input.env-var[type="text" ng-model="genericFileCtrl.uploadedGenericFile.envVarPartialID" placeholder="#{ data[:strings][:code_signing][:generic_file][:uploaded_file_placeholder] }"]
					p.progress-indicator.error[ng-if="genericFileCtrl.uploadedGenericFileErrorMessage() && genericFileCtrl.uploadedGenericFile.envVarPartialID.length > 0" ng-bind="genericFileCtrl.uploadedGenericFileErrorMessage()"]
					file-uploader[onupload="genericFileCtrl.uploadGenericFile()" model="genericFileCtrl.genericFileUploader" on-file-change="$files.length > 0 ? genericFileCtrl.uploadedGenericFile.updateFile($files[0]) : null" ng-disabled="genericFileCtrl.uploadedGenericFileErrorMessage()"]
						strong[ng-bind="genericFileCtrl.uploadInstruction"]
						em[ng-if="genericFileCtrl.uploadedGenericFile.envVarPartialID.length > 0"] == data[:strings][:code_signing][:generic_file][:upload_instructions]
						em[ng-if="genericFileCtrl.uploadedGenericFile.envVarPartialID.length == 0"] == data[:strings][:code_signing][:generic_file][:enter_id]
